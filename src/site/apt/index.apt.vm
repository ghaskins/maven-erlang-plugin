
Maven Erlang Plug-In

 The Maven Erlang Plug-In manages Erlang projects under Maven2, enabling 
 building, testing and deployment - as expected by Maven users.
 
 This project is based on the ideas of
 {{{http://maven-erlang.sourceforge.net/erlang-plugin/}maven-erlang}}, created 
 by Paul Guyot and Olivier Sambourg, but is maintained under this new regime in 
 order to improve and extend it. This incarnation also provides a little bit 
 more definition for {{{./development.html}development}} - be sure to check it 
 out if you are interested in contributing.

* Prerequisites

 You will need to have {{{http://maven.apache.org/download.html}maven2}} and
 {{{http://www.erlang.org/download.html}erlang}} version <<R13B04>> or
 later installed. 

* Getting started

 The plug-in is available from the Sonatype OSS Repository 
 {{https://oss.sonatype.org/service/local/}}. Add this to your POM {{plugins}}
 section.
 
+--
...
<plugin>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.artifactId}</artifactId>
  <version>${project.version}</version>
  <extensions>true</extensions>
</plugin>
...
+--

 Or you may check out the source code from the repository and install it
 locally.

+--
 svn co https://erlang-plugin.svn.sourceforge.net/svnroot/erlang-plugin/trunk/maven-erlang-plugin maven-erlang-plugin
 cd maven-erlang-plugin/
 mvn install
+--

 This will build, test, package and install the plug-in.
 
 To install the download version of the plug-in you need to extract the provided
 package and install the .jar artifacts with the following:

+--
 tar xzvf ${project.artifactId}-${project.version}.tar.gz
 cd ${project.artifactId}-${project.version}
 mvn install:install-file -Dfile=${project.artifactId}-${project.version}.jar -DgroupId=${project.groupId} -DartifactId=${project.artifactId} -Dversion=${project.version} -Dpackaging=jar
 mvn install:install-file -Dfile=${project.artifactId}-${project.version}-javadoc.jar -DgroupId=${project.groupId} -DartifactId=${project.artifactId} -Dversion=${project.version} -Dpackaging=jar -Dclassifier=javadoc
 mvn install:install-file -Dfile=${project.artifactId}-${project.version}-sources.jar -DgroupId=${project.groupId} -DartifactId=${project.artifactId} -Dversion=${project.version} -Dpackaging=jar -Dclassifier=sources
+--
 
** Packaging Type

 Three custom components are defined in the plug-in, and can be used by 
 configuring the <<<packaging>>> type of a project.
 
 * <<<erlang-otp>>> - An application development project, aimed at supporting 
 the conventions of the Erlang
 {{{http://www.erlang.org/doc/design_principles/users_guide.html}OTP Design Principles}}
 respecting the default <<<maven2>>> directory layout.
 
 * <<<erlang-std>>> - An application development project, aimed at supporting 
 the conventions of the Erlang
 {{{http://www.erlang.org/doc/design_principles/users_guide.html}OTP Design Principles}}
 respecting the default erlang/OTP directory layout.

 * <<<erlang-rel>>> - A release and packaging project that supports building
 an erlang/OTP packaged and distributable solution.  
 
** Configuration

 Here is an example of the minimum required configuration for any project that 
 wishes to use the Maven Erlang Plug-In:
 
+--
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>[your-gropupId]</groupId>
  <artifactId>[your-artifactId]</artifactId>
  <version>[your-version]</version>
  <packaging>erlang-std</packaging>                       <-- erlang-std, erlang-otp or erlang-erl
  <build>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>                     <-- required
      </plugin>
    </plugins>
  </build>
</project> 
+--

 To generate erlang specific output for site generation you may also configure
 the plug-in into the <<<reporting>>> section of your project's pom:

+--
  <reporting>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>edoc</report>
              <report>coverage</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
+--

 For more information about project reports please refer to:
 
 * {{{./edoc-mojo.html}edoc}}
 
 * {{{./coverage-mojo.html}coverage}}

** Directory Structure

 The default directory structure that is supported for projects depends on the
 project's packaging. For further information please refer to the documentation
 of the specific {{{./apidocs/eu/lindenbaum/maven/PackagingType.html}PackagingType}}.
 Please note that target folder structure is omitted in this listing.

** Goals

 The tables below shows how the plug-in goals are mapped to the Maven default
 lifecycle. 
 
*** <<<erlang-otp>>> and <<<erlang-std>>>

*--+--+
 <<Maven lifecycle phase>> | <<Goal in the Maven Erlang Plug-In>>
*--+--+
  initialize | {{{./initialize-mojo.html}initialize}}
*--+--+
  generate-sources | {{{./extract-dependencies-mojo.html}extract-dependencies}}
*--+--+
  generate-resources | {{{./generate-resources-mojo.html}generate-resources}}
*--+--+
  compile | {{{./compile-mojo.html}compile}}
*--+--+
  generate-test-resources | {{{./generate-test-resources-mojo.html}generate-test-resources}}
*--+--+
  test-compile | {{{./test-compile-mojo.html}test-compile}}
*--+--+
  test | {{{./test-mojo.html}test}}
*--+--+
  prepare-package | {{{./dialyzer-mojo.html}dialyzer}}
*--+--+
  package | {{{./package-mojo.html}package}}
*--+--+

*** <<<erlang-rel>>>
 
*--+--+
 <<Maven lifecycle phase>> | <<Goal in the Maven Erlang Plug-In>> 
*--+--+
  initialize | {{{./initialize-mojo.html}initialize}}
*--+--+
  generate-sources | {{{./extract-dependencies-mojo.html}extract-dependencies}}
*--+--+
  generate-resources | {{{./generate-release-resources-mojo.html}generate-release-resources}}
*--+--+
  compile | {{{./dialyzer-release-mojo.html}dialyzer-release}}
*--+--+
  test | {{{./test-release-mojo.html}test-release}}
*--+--+
  package | {{{./package-release-mojo.html}package-release}}
*--+--+

** Setup

 Provides the option to generate <sensible> defaults for <<<erlang-std>>> and
 <<<erlang-otp>>> packaged projects, replacing the need for a maven archetype.
 
 More information:
 
 * {{{./setup-mojo.html}setup}}

** Run

 There is a plug-in goal to run an <<<erlang-otp>>> or <<<erlang-std>>> packaged
 project for testing purposes. This will also start all required (transitive)
 applications. On successfull start the build will be paused to allow you to
 connect to the running application on the backend node remotely. To shutdown
 the applications and finish the build you will be prompted for further action.
 
 More information:
 
 * {{{./run-mojo.html}run}}
