
Maven Erlang Plug-In

 The Maven Erlang Plug-In manages Erlang projects under Maven2, enabling 
 building, testing and deployment - as expected by Maven users.
 
 This project is based on the ideas of
 {{{http://maven-erlang.sourceforge.net/erlang-plugin/}maven-erlang}}, created 
 by Paul Guyot and Olivier Sambourg, but is maintained under this new regime in 
 order to improve and extend it. This incarnation also provides a little bit 
 more definition for {{{./development.html}development}} - be sure to check it 
 out if you are interested in contributing.

* Prerequisites

 You will need to have {{{http://maven.apache.org/download.html}maven2}} and
 {{{http://www.erlang.org/download.html}erlang}} version <<R13B04>> or
 later installed. 

* Getting started

 The plug-in is available from the Sonatype OSS Repository 
 {{https://oss.sonatype.org/}}. Add this to your POM <<<plugins>>>
 section:
 
+--
...
<plugin>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.artifactId}</artifactId>
  <version>${project.version}</version>
  <extensions>true</extensions>
</plugin>
...
+--

 Or you may check out the source code from the repository and install it
 locally.

+--
 svn co https://erlang-plugin.svn.sourceforge.net/svnroot/erlang-plugin/tags/${project.artifactId}-${project.version} maven-erlang-plugin
 cd maven-erlang-plugin/
 mvn install
+--

 This will build, test, package and install the plug-in.
  
 To install the download version of the plug-in you need to extract the provided
 package and install the .jar artifacts with the following:

+--
 tar xzvf ${project.artifactId}-${project.version}.tar.gz
 
 cd ${project.artifactId}-${project.version}
 
 mvn install:install-file \
    -Dfile=${project.artifactId}-${project.version}.jar \
    -DgroupId=${project.groupId} \
    -DartifactId=${project.artifactId} \
    -Dversion=${project.version} \
    -Dpackaging=jar
    
 mvn install:install-file \
    -Dfile=${project.artifactId}-${project.version}-javadoc.jar \
    -DgroupId=${project.groupId} \
    -DartifactId=${project.artifactId} \
    -Dversion=${project.version} \
    -Dpackaging=jar \
    -Dclassifier=javadoc
    
 mvn install:install-file \
    -Dfile=${project.artifactId}-${project.version}-sources.jar \
    -DgroupId=${project.groupId} \
    -DartifactId=${project.artifactId} \
    -Dversion=${project.version} \
    -Dpackaging=jar \
    -Dclassifier=sources
+--
 
** Packaging Type

 Two custom components are defined in the plug-in, and can be used by 
 configuring the <<<packaging>>> type of a project.
 
 * <<<erlang-otp>>> - An application development project, aimed at supporting 
 the conventions of the Erlang
 {{{http://www.erlang.org/doc/design_principles/users_guide.html}OTP Design Principles}}
 respecting the default <<<maven2>>> directory layout.

 
 * <<<erlang-rel>>> - A release and packaging project that supports building
 an erlang/OTP packaged and distributable solution.  
 
** Configuration

 Here is an example of the minimum required configuration for any project that 
 wishes to use the Maven Erlang Plug-In:
 
+--
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>[your-gropupId]</groupId>
  <artifactId>[your-artifactId]</artifactId>
  <version>[your-version]</version>
  <packaging>erlang-otp</packaging>                       <-- erlang-otp or erlang-rel
  <build>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>                     <-- required
      </plugin>
    </plugins>
  </build>
</project> 
+--

** Directory Structure

 This is the default directory structure that is supported for projects, and in
 part also generated, by the plug-in. Please note that some target folders that
 are common to Maven projects e.g. site are omitted in this listing.

*** <<<erlang-otp>>>

+--
 BASE
   +-- src
   |     +-- main
   |     |     +-- erlang (*.erl, *.app, *.appup, *.mib, *.funcs)
   |     |     +-- include (*.hrl)
   |     |     +-- priv (*)
   |     |     +-- resources
   |     |     |     +-- priv (*)
   |     |    [+-- *] (other non-erlang source folders)
   |     |
   |     +-- test
   |           +-- erlang (*.erl)
   |           +-- include (*.hrl)
   |           +-- resources (*)
   |
   +-- target (.dialyzer.ok)
   |     +-- ebin (*.beam, *.app, *.appup)
   |     +-- lib (dependency applications)
   |     +-- include (*.hrl)
   |     +-- mibs (*.bin)
   |     +-- priv (*)
   |     +-- surefire-reports (TEST-*.xml)
   |     +-- test (*.beam, *.hrl)
   |    [+-- *_src] (non-erlang source folders)
   |
   +-- pom.xml
+--

*** <<<erlang-rel>>>

+--
 BASE
   +-- src
   |     +-- main
   |           +-- erlang (*.rel, *.relup)
   +-- target (.dialyzer.ok)
   |     +-- ebin (*.rel, *.relup)
   |     +-- lib (dependency applications)
   |     +-- releases (previous/subsequent releases)
   +-- pom.xml
+--

** Goals

 The tables below shows how the plug-in goals are mapped to the Maven default
 lifecycle. 
 
*** <<<erlang-otp>>>

*--+--+
 <<Maven lifecycle phase>> | <<Goal in the Maven Erlang Plug-In>> 
*--+--+
  generate-sources | {{{./unpack-dependencies-mojo.html}unpack-dependencies}}
*--+--+
  generate-resources | {{{./copy-resources-mojo.html}copy-resources}}
*--+--+
  compile | {{{./compile-mojo.html}compile}}
*--+--+
  generate-test-resources | {{{./copy-test-resources-mojo.html}copy-test-resources}}
*--+--+
  test-compile | {{{./test-compile-mojo.html}test-compile}}
*--+--+
  process-test-classes | {{{./dialyzer-mojo.html}dialyzer}}
*--+--+
  test | {{{./test-mojo.html}test}}
*--+--+
  package | {{{./package-mojo.html}package}}
*--+--+

*** <<<erlang-rel>>>
 
*--+--+
 <<Maven lifecycle phase>> | <<Goal in the Maven Erlang Plug-In>> 
*--+--+
  generate-sources | {{{./unpack-dependencies-mojo.html}unpack-dependencies}}
*--+--+
  process-resources | {{{./copy-resources-mojo.html}copy-resources}}
*--+--+
  compile | {{{./dialyzer-release-mojo.html}dialyzer-release}}
*--+--+
  process-classes | {{{./prepare-release-mojo.html}prepare-release}}
*--+--+
  package | {{{./package-release-mojo.html}package-release}}
*--+--+

** Setup

 Provides the option to generate <sensible> defaults, replacing the need for
 a maven archetype.
 
 More information:
 
 * {{{./setup-mojo.html}setup}}

** Run

 There is a plug-in goal to run an <<<erlang-otp>>> packaged project for basic
 testing purposes. It will start an interactive erlang shell with <<<sasl>>>
 which is able to start the application. The goal ends up in the shell in order
 to provide interactive access to the started application.
 
 More information:
 
 * {{{./run-mojo.html}run}}

** Reports

 There are also plug-in goals that provide output for site generation, such as
 {{{http://www.erlang.org/doc/apps/edoc/index.html}EDoc}} and source code test 
 coverage reports.
 
 More information:
 
 * {{{./doc-mojo.html}doc}}
 
 * {{{./test-doc-mojo.html}test-doc}}
 
 * {{{./coverage-mojo.html}coverage}}
