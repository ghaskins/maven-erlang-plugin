
Project Configuration

* Application Resource, Application Upgrade and Release Files

 The following sections describe the ways the plugin can support a projects
 application resource, upgrade and release file management. For further
 information about application resource, upgrade and release files see:
 
 * {{http://www.erlang.org/doc/man/app.html}}
 
 * {{http://www.erlang.org/doc/man/appup.html}}
 
 * {{http://www.erlang.org/doc/man/rel.html}}

** File Management

 The plugin supports the management of erlang resource files by providing
 <<<project packaging variables>>>. These will be replaced by values on project
 packaging time. Provided project packaging variables currently include:
 
 * <<<$\{ARTIFACT\}>>>: the projects artifact id (atom)

 * <<<$\{DESCRIPTION\}>>>: the projects description (string)

 * <<<$\{ID\}>>>: the projects id (string)

 * <<<$\{VERSION\}>>>: the projects version (string)

 Only <<<erlang-otp>>> and <<<erlang-std>>>:

 * <<<$\{MODULES\}>>>: all compiled <<<.beam>>> files found in the target ebin
 folder (list)

 * <<<$\{REGISTERED\}>>>: all registered names of the application, based on the
 <<<-registered(Names).>>> attribute retrieved from the compiled <<<.beam>>>
 files (list)

 Only <<<erlang-rel>>>:
 
 * <<<$\{APPLICATIONS\}>>>: the project dependencies application and version
 tuples (string)

 * <<<$\{AUTODEPS\}>>>: the project dependencies application and version
 tuples including the standard applications <<<kernel>>> and <<<sasl>>> as
 available on the backend node(s) (list)

 * <<<$\{ERTS\}>>>: the version of <<<erts>>> as found in the backend node

 * <<<$\{APPLICATION_NAME\}>>>: will be replaced by a string representing
 the available version of the application denoted by <<<APPLICATION_NAME>>> on
 the backend node

** File Generation

 The plug-in can generate default versions of application resource and upgrade
 files for your project. This is done by the setup mojo. For further information
 please refer to the {{{./setup-mojo.html}mojos documentation}}. Generation of
 release files is not supported (due to their complexity).

** Application Resource File Checking

 Will be performed on <<<erlang-otp>>> or <<<erlang-std>>> project packaging.
 Checks include:

 * consistency of application file and pom project name (artifactId)

 * consistency of application file and pom project version

 * consistency of compiled and configured modules

 * consistency of configured start module (exists and implements correct
 behaviour)

 * consistency of configured application dependencies

** Application Upgrade File Checking

 Will be performed on (erlang-otp) project packaging. Checks whether upgrade
 file has correct term structure.
 
* Release File Checking

 Will be performed on <<<erlang-rel>>> project packaging. Checks include:

 * consistency of release file and pom project name (artifactId)

 * consistency of release file and pom project version

 * consistency of configured application dependencies
